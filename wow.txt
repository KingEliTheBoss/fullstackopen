REACT main library
VITE helper library
JSON Server for tests
AXIOS for communication between browser and server
"npm init" creates package.json and node modules
EXPRESS for http requests
NODEMON to hot reload backend server
POSTMAN for http request tests
REST Client plug-in for VS Code for easier http request tests
MORGAN middleware for console logging and messaging
CORS for connectivity of resources
flyctl to use fly commands and deploy to the internet
MONGODB ATLAS to save data to it
MONGOOSE library to connect to MONGODB
DOTENV library to create environment variables so it isn't used harcoded
ESLINT para detectar errores de estilo de una forma mucho mejor
stylistiv eslint plugin - code style related rules
CROSS-ENV library that lets different environments for production, development, tests
SUPERTEST library to help write tests for testing API
EXPRESS-ASYNC-ERRORS library to not need to use try/catch when catching errors with async/await
BCRYPT library to generate password hashes
JSONWEBTOKEN libraty to generate web tokens for authentication
PROP-TYPES library that allows react props to have types and/or requirements
VITEST library to make tests of websites' front end
JSDOM library to simulate a web browser
REACT-TESTING-LIBRARY to help render components for testing purposes
JEST-DOM to extend the expressive power of tests
ESLINT-PLUGIN-VITEST-GLOBALS to make the vitest globals variables not be an error by eslint
USER-EVENT library to help simulate user input easier for tests
COVERAGE-V8 finds the coverage of tests and makes a useful report
PLAYWRIGHT to make End to End tests between front-end and back-end
REDUX library for better state management
@reduxjs/toolkit also for better state management, better than redux because redux is deprecated
DEEP-FREEZE library that helps define immutable functions, good for reducers
REACT-REDUX library that implements hooks to be able to use redux store in multiple components
@tanstack/react-query to help store and manage data retrieved from the server, not needed if already using redux toolkit since it comes with its own query stuff, try not to mix, reduxtoolkit is better imo
REACT-ROUTER-DOM library that lets you navigate different views on a web app easily
REACT-BOOTSTRAP package that allows react friendly components with styles
MATERIALUI package that also allows react friendly components with styles
STYLED-COMPONENTS that allows you to create new react components with styles

WEBPACK library that allows you to bundle your project into just necessary files
BABEL loader that lets bundlers bundle files that are not plain javascript
CORE-JS REGENERATOR-RUNTIME libraries that help to be able to bundle async/await code
@babel/preset-env @babel/preset-react Presets to be able to transpile code to plain javascript, env to transpile to ES5 and react to be able to use react components
style-loader css-loader are loaders to be able to transpile css files and code
WEBPACK-DEV-SERVER to be able to run a webpack project without needing to bundle it every time

PRETTIER library that formats code automatically
GRAPHQL lets you obtain data from server more dinamically
@APOLLO/SERVER server library which facilitates graphql connections in the backend
UUID library that helps generate ids
@APOLLO/CLIENT the connect to graphql server from the frontendg

GRAPHQL-WS can be used in frontend too
WS
@GRAPHQL-TOOLS/SCHEMA
GRAPHQL-SUBSCRIPTIONS
//These 4 can be used for managing graphql subscriptions and web sockets

TS-NODE TYPESCRIPT to be able to make an app with typescript
@TYPES/ can be used to have the exact types for different projects
TS_NODE-DEV to be able refresh server when files are saved automatically

ZOD schema validator

















"npm create vite@latest appName --template react" command in console to create a new basic react application with vite
"npm install" to install it
"npm run dev" to run it
it resides in http://localhost:5173/

modify main.jsx to look like this:{

	import ReactDOM from 'react-dom/client'

	import App from './App'

	ReactDOM.createRoot(document.getElementById('root')).render(<App />)

}
make sure it exports App component



"import {useState, useEffect} from "react";
useState hooks to create state or pieces of state to a component to re-render it every time it is modified
useEffect hooks usually used for handling of external systems like requests to server, and others

props for components need to be handled carefully
Remember function that returns a function
Don't make components within components



JSON Server
"npm install -g json-server" to instal JSON Server globally in computer
run "json-server --port 3001 --watch db.json" to have JSON Server watch a specific file db.json
can also run "npx json-server --port 3001 --watch db.json" if you don't want to make global installation

a better way to run JSON Server is to "npm install json-server --save-dev" so it's only for development and only that project
and add it to the package.json scripts like: "server": "json-server -p3001 --watch db.json"
run JSON Server with "npm run server"



AXIOS
"npm install axios" to install library which simplifies communication between browser and server
import axios from "axios";
use correct methods for specific requests
make sure to use .then when request is successful and .catch for error handling
make server requests in separate services file(s)



styles can be put into css files or inside components code as like "inline"



Se obtuvo llave de api para openweathermap.org

esto es usado cuando se quiere guardar alguna llave para api externa, esta es de ejemplo
export VITE_SOME_KEY=54l41n3n4v41m34rv0 && npm run dev // For Linux/macOS Bash
($env:VITE_SOME_KEY="54l41n3n4v41m34rv0") -and (npm run dev) // For Windows PowerShell
set "VITE_SOME_KEY=54l41n3n4v41m34rv0" && npm run dev // For Windows cmd.exe

const api_key = import.meta.env.VITE_SOME_KEY para obtenerla



"npm init" to create new minimal package.json file and start simple node application
"start": "node index.js" in package.json script to start app with npm command



"npm install express"
express is used to ease server side web development
const express = require("express")



"npm install --save-dev nodemon"
nodemon lets you hot reload simple node applications
"dev": "nodemon index.js" in package.json to run with "npm run dev" in console



Use POSTMAN to test http request on the backend more easily

Can also use REST client plugin in VS Code, this could be better since the requests are stored inside the project and you have more control
Create a requests folder at the root of the project and create .rest files with the wanted requests, can separate requests with ###



"npm install morgan" to install Morgan middleware which lets you log better messages in the console



"npm install cors" to install cors utility that let's you link to external domains and resources



pwsh -Command "iwr https://fly.io/install.ps1 -useb | iex" ||||||||| to work with fly.io and use fly commands
"fly auth login" to sign in to fly.io account
"fly launch --no-deploy" to create app in fly.io
write "[env] PORT= "3000" and internal_port = 3000" in fly.toml to make it work
"fly deploy" to put app on the internet
"fly apps open" to open app address
"fly logs" to check for errors
"fly scale show" to see how many machines are for the app
"fly scale count 1" to change amount of machines
"flyctl ping -o personal" to check app connection health



Crear cuenta MONGODB Atlas
Crear cluster, dar configuración de acceso
Conectar cluster a aplicación
Utilizar "npm install mongodb" para conectar código
Mejor utilizar "npm install mongoose" que tiene una mejor API



npm install dotenv



npm run test -- filepath



npm install eslint @eslint/js --save-dev
npx eslint --init

npm install --save-dev @stylistic/eslint-plugin-js



npm install --save-dev cross-env | for normal use
npm install cross-env | for when it's deployed to the internet



npm install --save-dev supertest



npm install express-async-errors



npm install bcrypt



npm install jsonwebtoken



npm install prop-types



npm install --save-dev vitest
npm install --save-dev jsdom

npm install --save-dev @testing-library/react
npm install --save-dev @testing-library/jest-dom

npm install --save-dev eslint-plugin-vitest-globals

npm install --save-dev @testing-library/user-event

npm install --save-dev @vitest/coverage-v8








//These are for an intermediate project between front-end and back-end projects
npm init
npm init playwright@latest

npx playwright test specific_test_file.spec.js:line_number_of_specific_test --debug
example: npx playwright test note_app.spec.js:58 --debug
--debug flag to go step by step








npm install redux
import { createStore } from "redux";
const store = createStore(myReducer);

npm install @reduxjs/toolkit
import { configureStore } from "@reduxjs/toolkit";
const store = configureStore({reducer: myReducer});




npm install --save-dev deep-freeze




npm install react-redux




npm install @tanstack/react-query



npm install react-router-dom



npm install react-bootstrap
npm install @mui/material @emotion/react @emotion/styled
npm install styled-components



npm install --save-dev webpack webpack-cli
npm install @babel/core babel-loader @babel/preset-react --save-dev
npm install core-js regenerator-runtime
npm install @babel/preset-env --save-dev
npm install style-loader css-loader --save-dev
npm install --save-dev webpack-dev-server



npm install --save-dev --save-exact prettier
create .prettierrc and .prettierignore files
prettier --check .
set up editor
npm install --save-dev eslint-config-prettier so eslint works well with prettier



npm install graphql
npm install @apollo/server
npm install @apollo/client

npm install uuid



npm install graphql-ws ws @graphql-tools/schema
npm install graphql-subscriptions



npm install --location=global ts-node typescript
//location is set to gloabl so that it installs in the whole computer
npm install --save-dev ts-node typescript
//using it in regular project after using npm init


npm install --save-dev @types/react
npm install --save-dev @types/express
npm install --save-dev @types/lodash
npm install --save-dev @types/jest
npm install --save-dev @types/mongoose
npm install --save-dev @types/node
etc.


npm install --save-dev ts-node-dev

npm install --save-dev eslint @eslint/js @types/eslint__js typescript typescript-eslint
//eslint packages to work with typescript
npm install --save-dev @stylistic/eslint-plugin



npm install zod